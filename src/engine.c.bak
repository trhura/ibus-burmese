/* vim:set et sts=4: */

#include "engine.h"

typedef struct _IBusMyansanEngine IBusMyansanEngine;
typedef struct _IBusMyansanEngineClass IBusMyansanEngineClass;

struct _IBusMyansanEngine {
	IBusEngine parent;

	IBusText *surrounding_text;
    /* members */
	//	GString *preedit;
    // gint cursor_pos;

	//    IBusLookupTable *table;
};

struct _IBusMyansanEngineClass {
	IBusEngineClass parent;
};

/* functions prototype */
static void	ibus_myansan_engine_class_init	(IBusMyansanEngineClass	*klass);
static void	ibus_myansan_engine_init		(IBusMyansanEngine		*engine);
static void	ibus_myansan_engine_destroy		(IBusMyansanEngine		*engine);
static gboolean
		ibus_myansan_engine_process_key_event
                                            (IBusEngine             *engine,
                                             guint               	 keyval,
                                             guint               	 keycode,
                                             guint               	 modifiers);
static void ibus_myansan_engine_focus_in    (IBusEngine             *engine);
static void ibus_myansan_engine_focus_out   (IBusEngine             *engine);
static void ibus_myansan_engine_reset       (IBusEngine             *engine);
static void ibus_myansan_engine_enable      (IBusEngine             *engine);
static void ibus_myansan_engine_disable     (IBusEngine             *engine);
static void ibus_engine_set_cursor_location (IBusEngine             *engine,
                                             gint                    x,
                                             gint                    y,
                                             gint                    w,
                                             gint                    h);
static void ibus_myansan_engine_set_capabilities
                                            (IBusEngine             *engine,
                                             guint                   caps);
static void ibus_myansan_engine_page_up     (IBusEngine             *engine);
static void ibus_myansan_engine_page_down   (IBusEngine             *engine);
static void ibus_myansan_engine_cursor_up   (IBusEngine             *engine);
static void ibus_myansan_engine_cursor_down (IBusEngine             *engine);
static void ibus_myansan_property_activate  (IBusEngine             *engine,
                                             const gchar            *prop_name,
                                             gint                    prop_state);
static void ibus_myansan_engine_property_show
											(IBusEngine             *engine,
                                             const gchar            *prop_name);
static void ibus_myansan_engine_property_hide
											(IBusEngine             *engine,
                                             const gchar            *prop_name);

static void ibus_myansan_engine_commit_string
                                            (IBusMyansanEngine      *myansan,
                                             const gchar            *string);
static void ibus_myansan_engine_update      (IBusMyansanEngine      *myansan);


G_DEFINE_TYPE (IBusMyansanEngine, ibus_myansan_engine, IBUS_TYPE_ENGINE)

static void
ibus_myansan_engine_class_init (IBusMyansanEngineClass *klass)
{
	IBusObjectClass *ibus_object_class = IBUS_OBJECT_CLASS (klass);
	IBusEngineClass *engine_class = IBUS_ENGINE_CLASS (klass);
	
	ibus_object_class->destroy = (IBusObjectDestroyFunc) ibus_myansan_engine_destroy;

    engine_class->process_key_event = ibus_myansan_engine_process_key_event;
}

static void
ibus_myansan_engine_init (IBusMyansanEngine *myansan)
{
	myansan->surrounding_text = ibus_text_new_from_string ("");
}

static void
ibus_myansan_engine_destroy (IBusMyansanEngine *myansan)
{
	if (myansan->surrounding_text) {
		g_object_unref (myansan->surrounding_text);
		myansan->surrounding_text = NULL;
	}

	((IBusObjectClass *) ibus_myansan_engine_parent_class)->destroy ((IBusObject *)myansan);
}

static void
ibus_myansan_engine_update_lookup_table (IBusMyansanEngine *myansan)
{
    /* gchar ** sugs; */
    /* gint n_sug, i; */
    /* gboolean retval; */

    /* if (myansan->preedit->len == 0) { */
    /*     ibus_engine_hide_lookup_table ((IBusEngine *) myansan); */
    /*     return; */
    /* } */

    /* ibus_lookup_table_clear (myansan->table); */
    
    /* sugs = myansan_dict_suggest (dict, */
    /*                              myansan->preedit->str, */
    /*                              myansan->preedit->len, */
    /*                              &n_sug); */

    /* if (sugs == NULL || n_sug == 0) { */
    /*     ibus_engine_hide_lookup_table ((IBusEngine *) myansan); */
    /*     return; */
    /* } */

    /* for (i = 0; i < n_sug; i++) { */
    /*     ibus_lookup_table_append_candidate (myansan->table, ibus_text_new_from_string (sugs[i])); */
    /* } */

    /* ibus_engine_update_lookup_table ((IBusEngine *) myansan, myansan->table, TRUE); */

    /* if (sugs) */
    /*     myansan_dict_free_suggestions (dict, sugs); */
}

static void
ibus_myansan_engine_update_preedit (IBusMyansanEngine *myansan)
{
    /* IBusText *text; */
    /* gint retval; */

    /* text = ibus_text_new_from_static_string (myansan->preedit->str); */
    /* text->attrs = ibus_attr_list_new (); */
    
    /* ibus_attr_list_append (text->attrs, */
    /*                        ibus_attr_underline_new (IBUS_ATTR_UNDERLINE_SINGLE, 0, myansan->preedit->len)); */

    /* if (myansan->preedit->len > 0) { */
    /*     retval = myansan_dict_check (dict, myansan->preedit->str, myansan->preedit->len); */
    /*     if (retval != 0) { */
    /*         ibus_attr_list_append (text->attrs, */
    /*                            ibus_attr_foreground_new (0xff0000, 0, myansan->preedit->len)); */
    /*     } */
    /* } */
    
    /* ibus_engine_update_preedit_text ((IBusEngine *)myansan, */
    /*                                  text, */
    /*                                  myansan->cursor_pos, */
    /*                                  TRUE); */
}

/* commit preedit to client and update preedit */
static gboolean
ibus_myansan_engine_commit_preedit (IBusMyansanEngine *myansan)
{
    /* if (myansan->preedit->len == 0) */
    /*     return FALSE; */
    
    /* ibus_myansan_engine_commit_string (myansan, myansan->preedit->str); */
    /* g_string_assign (myansan->preedit, ""); */
    /* myansan->cursor_pos = 0; */

    /* ibus_myansan_engine_update (myansan); */

    /* return TRUE; */
}


static void
ibus_myansan_engine_commit_string (IBusMyansanEngine *myansan,
                                   const gchar       *string)
{
    IBusText *text;
    text = ibus_text_new_from_static_string (string);
    ibus_engine_commit_text ((IBusEngine *)myansan, text);
}

static void
ibus_myansan_engine_update (IBusMyansanEngine *myansan)
{
	//    ibus_myansan_engine_update_preedit (myansan);
    // ibus_engine_hide_lookup_table ((IBusEngine *)myansan);
}

#define is_alpha(c) (((c) >= IBUS_a && (c) <= IBUS_z) || ((c) >= IBUS_A && (c) <= IBUS_Z))

static gboolean 
ibus_myansan_engine_process_key_event (IBusEngine *engine,
                                       guint       keyval,
                                       guint       keycode,
                                       guint       modifiers)
{
    IBusText *text;
    IBusMyansanEngine *myansan = (IBusMyansanEngine *)engine;

    if (modifiers & IBUS_RELEASE_MASK)
        return FALSE;

    /* modifiers &= (IBUS_CONTROL_MASK | IBUS_MOD1_MASK); */

    /* if (modifiers == IBUS_CONTROL_MASK && keyval == IBUS_s) { */
    /*     ibus_myansan_engine_update_lookup_table (myansan); */
    /*     return TRUE; */
    /* } */

    /* if (modifiers != 0) { */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     else */
    /*         return TRUE; */
    /* } */


    /* switch (keyval) { */
    /* case IBUS_space: */
    /*     g_string_append (myansan->preedit, " "); */
    /*     return ibus_myansan_engine_commit_preedit (myansan); */
    /* case IBUS_Return: */
    /*     return ibus_myansan_engine_commit_preedit (myansan); */

    /* case IBUS_Escape: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */

    /*     g_string_assign (myansan->preedit, ""); */
    /*     myansan->cursor_pos = 0; */
    /*     ibus_myansan_engine_update (myansan); */
    /*     return TRUE;         */

    /* case IBUS_Left: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     if (myansan->cursor_pos > 0) { */
    /*         myansan->cursor_pos --; */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
    /*     return TRUE; */

    /* case IBUS_Right: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     if (myansan->cursor_pos < myansan->preedit->len) { */
    /*         myansan->cursor_pos ++; */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
    /*     return TRUE; */
    
    /* case IBUS_Up: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     if (myansan->cursor_pos != 0) { */
    /*         myansan->cursor_pos = 0; */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
    /*     return TRUE; */

    /* case IBUS_Down: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
        
    /*     if (myansan->cursor_pos != myansan->preedit->len) { */
    /*         myansan->cursor_pos = myansan->preedit->len; */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
        
    /*     return TRUE; */
    
    /* case IBUS_BackSpace: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     if (myansan->cursor_pos > 0) { */
    /*         myansan->cursor_pos --; */
    /*         g_string_erase (myansan->preedit, myansan->cursor_pos, 1); */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
    /*     return TRUE; */
    
    /* case IBUS_Delete: */
    /*     if (myansan->preedit->len == 0) */
    /*         return FALSE; */
    /*     if (myansan->cursor_pos < myansan->preedit->len) { */
    /*         g_string_erase (myansan->preedit, myansan->cursor_pos, 1); */
    /*         ibus_myansan_engine_update (myansan); */
    /*     } */
    /*     return TRUE; */
    /* } */

    /* if (is_alpha (keyval)) { */
    /*     g_string_insert_c (myansan->preedit, */
    /*                        myansan->cursor_pos, */
    /*                        keyval); */

    /*     myansan->cursor_pos ++; */
    /*     ibus_myansan_engine_update (myansan); */
        
    /*     return TRUE; */
    /* } */

    /* return FALSE; */
}
